using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Labirint
{
    class PathFinger
    {
        #region fields

        const int m = 56, n = 56, k = 3136;//ширина,высота и кол ячеек поля лабиринта
        int Ni = 0;//номер шага
        int startX = 1, startY = 54, finishX = 53, finishY = 1;//координаты финиша и старта
        int[,] filld = new int[n, m];//рабочее поле лабиринта

        #region MatrixLabirint
        //матрица лабиринта
        // -3 стена, -5 финиш, -7 проход, 0 старт
        int[,] map = {
       /*1*/    {-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3},
       /*2*/    {-3,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-7,-7,-5,-3,-3},
       /*3*/    {-3,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-7,-7,-7,-3,-3},
       /*4*/    {-3,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-7,-7,-7,-3,-3},
       /*5*/    {-3,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-7,-7,-7,-3,-3},
       /*6*/    {-3,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-7,-7,-7,-3,-3},
       /*7*/    {-3,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-7,-7,-7,-3,-3},             
       /*8*/    {-3,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-7,-7,-7,-3,-3},
       /*9*/    {-3,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-7,-7,-7,-3,-3},
      /*10*/    {-3,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-3,-3,-3,-3,-3},
      /*11*/    {-3,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-3,-7,-7,-3,-3},
      /*12*/    {-3,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-3,-7,-7,-3,-3},             
      /*13*/    {-3,-7,-7,-7,-7,-3,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-7,-7,-7,-3,-7,-7,-3,-3},
      /*14*/    {-3,-7,-7,-7,-7,-3,-7,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-3,-3,-3,-3,-7,-7,-3,-3},
      /*15*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-7,-7,-7,-3,-7,-7,-3,-3}, 
      /*16*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-7,-7,-7,-3,-7,-7,-3,-3},
      /*17*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-3,-3,-3,-3,-7,-3,-7,-7,-3,-3},             
      /*18*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-7,-7,-3,-7,-3,-7,-7,-3,-3},
      /*19*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},
      /*20*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},
      /*21*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},
      /*22*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},             
      /*23*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},
      /*24*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-7,-7,-7,-3,-3},
      /*25*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3},
      /*26*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-7,-7,-7,-3,-3},
      /*27*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-7,-3,-3},             
      /*28*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-7,-7,-7,-3,-3},
      /*29*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3},
      /*30*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-7,-7,-7,-3,-3},             
      /*31*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-7,-3,-3},
      /*32*/    {-3,-7,-7,-7,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-7,-7,-7,-3,-3},             
      /*33*/    {-3,-7,-7,-3,-7,-7,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},
      /*34*/    {-3,-7,-7,-7,-7,-7,-3,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},
      /*35*/    {-3,-3,-3,-7,-3,-3,-3,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},            
      /*36*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},
      /*37*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},             
      /*38*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},
      /*39*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-7,-7,-3,-3},
      /*40*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3},             
      /*41*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-7,-7,-7,-7,-3,-3},
      /*42*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-7,-3,-3,-3,-3,-7,-3,-3},             
      /*43*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,
                -7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-7,-7,-7,-3,-7,-3,-3},
      /*44*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-7,-3,-7,-3,-3},
      /*45*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,
                -7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-3,-7,-7,-3,-3,-3,-7,-3,-7,-3,-3},             
      /*46*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-7,-7,-3,-3,-7,-7,-3,-7,-3,-3},
      /*47*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,
                -7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-3,-7,-7,-3,-3,-3,-7,-3,-7,-3,-3},             
      /*48*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-3,-3,-7,-7,-3,-7,-3,-3},
      /*49*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,
                -7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-3,-7,-7,-3,-3,-7,-7,-3,-7,-3,-3},
      /*50*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-3,-7,-3,-3,-3,-3,-7,-3,-7,-3,-3},
      /*51*/    {-3,-7,-7,-7,-7,-7,-7,-3,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,
                -7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3,-7,-7,-7,-7,-3,-3},
      /*52*/    {-3,-7,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3},             
      /*53*/    {-3,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,
                -7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3},
      /*54*/    {-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3},
      /*55*/    {-3,0,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,
                -7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-3,-3},             
      /*56*/    {-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,
                -3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3},
                            };

        


        #endregion

        #endregion

        #region свойства
        
        public int[,] Filld
        {
            set { filld = value; }
            get { return filld; }
        }

        #endregion

        #region методы

        #region SetStartAndFinish
        /// <summary>
        /// устанавливаем позиции старта и финиша
        /// </summary>
        public void SetStartAndFinish()
        {
            for (int i = 0; i < n; i++)
                for (int j = 0; j < m; j++)
                {
                    if (filld[i, j] == 0 || filld[i, j] == -5)
                        filld[i, j] = -7;
                }
            filld[startY, startX] = 0;
            filld[finishY, finishX] = -5;

        }
        #endregion

        #region FindPath
        public void FindPath()
        {
            //*
            //Построение графа 
            bool endFinther = false;
            do
            {
                if (endFinther) break;
                for (int i = 0; i < m; i++)
                {
                    for (int j = 0; j < n; j++)
                    {
                        if (filld[i, j] == Ni)//если элемент поля равен номеру шага
                            //перебераем соседние клетки
                        {
                            //сверху
                            if (filld[i + 1, j] == -5)//если это финиш-конец поиска
                            {
                                filld[i + 1, j] = Ni + 1;//записываем туда значение шага
                                endFinther = true;//признак конца поиска
                                break;//выход из цыкла
                            }
                                else if (filld[i + 1, j] == -7)//если это коридор
                                {
                                    filld[i + 1, j] = Ni + 1;//записываем туда значение шага
                                };
                            //снизу
                            if (filld[i - 1, j] == -5)//если это финиш-конец поиска
                            {
                                filld[i - 1, j] = Ni + 1;//записываем туда значение шага
                                endFinther = true;//признак конца поиска
                                break;//выход из цыкла
                            }
                                else if (filld[i - 1, j] == -7)//если это коридор
                                {
                                    filld[i - 1, j] = Ni + 1;//записываем туда значение шага
                                };
                            //справа
                            if (filld[i, j + 1] == -5)//если это финиш-конец поиска
                            {
                                filld[i, j + 1] = Ni + 1;//записываем туда значение шага
                                endFinther = true;//признак конца поиска
                                break;//выход из цыкла
                            }
                                else if (filld[i, j + 1] == -7)//если это коридор
                                {
                                    filld[i, j + 1] = Ni + 1;//записываем туда значение шага
                                };
                            //слева
                            if (filld[i, j - 1] == -5)//если это финиш-конец поиска
                            {
                                filld[i, j - 1] = Ni + 1;//записываем туда значение шага
                                endFinther = true;//признак конца поиска
                                break;//выход из цыкла
                            }
                                else if (filld[i, j - 1] == -7)//если это коридор
                                {
                                    filld[i, j - 1] = Ni + 1;//записываем туда значение шага
                                };

                        };
                    }

                } Ni++;//увеличиваем значение шага

            } while ((Ni < k) || (!endFinther));
        }
        #endregion

        #region MinPath
        public void MinPath()
        {
            //формирование минимального пути
            int minID = Ni;//минимальный номер шага
            int y, x, tempY = 0, tempX = 0;

            x = finishX;
            y = finishY;

            do
            {

                if (filld[y, x] == Ni)//начинаем с финиша и перебераем соседние ячейки
                {
                    //сверху
                    //если значение поля меньше минимального номера шага и еще не встречалась
                    //а также не является стеной,финишем или неиследуемым коридором
                    if ((filld[y + 1, x] < minID) && (filld[y + 1, x] != -1) && (filld[y + 1, x] != -3) &&
                                                     (filld[y + 1, x] != -5) && (filld[y + 1, x] != -7))
                    {
                        minID = filld[y + 1, x];//меняем значение минимального номера шага
                        tempY = y + 1;//сохраняем координаты во временные переменные
                        tempX = x;
                    }
                    //снизу
                    if ((filld[y - 1, x] < minID) && (filld[y - 1, x] != -1) && (filld[y - 1, x] != -3) &&
                                                     (filld[y - 1, x] != -5) && (filld[y - 1, x] != -7))
                    {
                        minID = filld[y - 1, x];
                        tempY = y - 1;
                        tempX = x;
                    }
                    //справа
                    if ((filld[y, x + 1] < minID) && (filld[y, x + 1] != -1) && (filld[y, x + 1] != -3) &&
                                                     (filld[y, x + 1] != -5) && (filld[y, x + 1] != -7))
                    {
                        minID = filld[y, x + 1];
                        tempY = y;
                        tempX = x + 1;
                    }
                    //слева
                    if ((filld[y, x - 1] < minID) && (filld[y, x - 1] != -1) && (filld[y, x - 1] != -3) &&
                                                     (filld[y, x - 1] != -5) && (filld[y, x - 1] != -7))
                    {
                        minID = filld[y, x - 1];
                        tempY = y;
                        tempX = x - 1;
                    }

                    filld[y, x] = -1;//помечаем ячейку как маршрут
                    Ni = minID;//номеру шага присваиваем значение минимального шага
                    y = tempY;//кординатам присваиваем значение временных координат
                    x = tempX;

                }
            } while (Ni > 0 || ((x != startX) && (y != startY)));//пока не достигнем финиша
        }
        #endregion

        #region SetStart
        /// <summary>
        /// устанавливаем значения старта
        /// </summary>
        /// <param name="y">координата по х</param>
        /// <param name="x">кордината по у</param>
        /// <returns></returns>
        public bool SetStart(int y, int x)
        {
            if (filld[y, x] == -3) return false;

            this.startX = x;
            this.startY = y;

            return true;
        }
        #endregion

        #region SetFinish
        /// <summary>
        /// устанавливаем значения финиша
        /// </summary>
        /// <param name="y">координата по х</param>
        /// <param name="x">кордината по у</param>
        /// <returns></returns>
        public bool SetFinish(int y, int x)
        {
            if (filld[y, x] == -3) return false;

            finishX = x;
            finishY = y;

            return true;
        }
        #endregion

        #region CopyMapToFielld
        /// <summary>
        /// копируем карту лабиринта
        /// </summary>
        public void CopyMapToFielld()
        {
            for (int i = 0; i < n; i++)
                for (int j = 0; j < m; j++)
                    filld [i,j]=map [i,j];
        }
        #endregion

        #endregion

    }
}
